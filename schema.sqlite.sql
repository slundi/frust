CREATE TABLE IF NOT EXISTS account (
	id  INTEGER NOT NULL PRIMARY KEY,
	username  VARCHAR(32) NOT NULL,
	encrypted_password   VARCHAR(72) NOT NULL,
	created DATETIME NOT NULL DEFAULT(DATETIME('now')),
	config TEXT NOT NULL DEFAULT '{}',
	UNIQUE(username)
);

CREATE TABLE IF NOT EXISTS token (
	id  INTEGER NOT NULL PRIMARY KEY,
	account_id INTEGER NOT NULL,
	created DATETIME NOT NULL DEFAULT(DATETIME('now')),
	value VARCHAR(64),
	UNIQUE(value)
	FOREIGN KEY(account_id) REFERENCES account(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS folder (
	id  INTEGER NOT NULL PRIMARY KEY,
	account_id INTEGER NOT NULL,
	name VARCHAR(64),
	UNIQUE(account_id, name),
	FOREIGN KEY(account_id) REFERENCES account(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS feed (
	id  INTEGER NOT NULL PRIMARY KEY,
	slug VARCHAR(36) NOT NULL,
	title VARCHAR(255) NOT NULL,
	link VARCHAR(255) NOT NULL,
	description TEXT NOT NULL,	
	language TEXT,
	copyright TEXT,
	managing_editor VARCHAR(255),
	webmaster VARCHAR(255),
	publication_date DATETIME,
	last_build_date DATETIME,
	category VARCHAR(64),
	generator VARCHAR(64),
	ttl INTEGER,
	image TEXT,
	extra TEXT,
	-- TODO: improve, ATOM support
	UNIQUE(slug)
);

CREATE TABLE IF NOT EXISTS subscription (
	id  INTEGER NOT NULL PRIMARY KEY,
	account_id INTEGER NOT NULL,
	feed_id INTEGER NOT NULL,
	folder_id INTEGER,
	xpath VARCHAR(255),
	added DATETIME NOT NULL DEFAULT(DATETIME('now')),
	UNIQUE(account_id, feed_id),
	FOREIGN KEY(account_id) REFERENCES account(id) ON DELETE CASCADE
	FOREIGN KEY(feed_id) REFERENCES feed(id) ON DELETE CASCADE
	FOREIGN KEY(folder_id) REFERENCES folder(id) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS article (
	id  INTEGER NOT NULL PRIMARY KEY,
	slug VARCHAR(36) NOT NULL,
	title VARCHAR(255) NOT NULL,
	link VARCHAR(255) NOT NULL,
	-- TODO
	UNIQUE(slug)
);

CREATE TABLE IF NOT EXISTS read (
	id  INTEGER NOT NULL PRIMARY KEY,
	account_id INTEGER NOT NULL,
	article_id INTEGER NOT NULL,
	saved BOOLEAN NOT NULL DEFAULT(FALSE),
	UNIQUE(account_id, article_id),
	FOREIGN KEY(account_id) REFERENCES account(id) ON DELETE CASCADE
	FOREIGN KEY(article_id) REFERENCES article(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS filter (
	id  INTEGER NOT NULL PRIMARY KEY,
	slug VARCHAR(36) NOT NULL,
	account_id INTEGER NOT NULL,
	subscription_id INTEGER,
	name VARCHAR(64),
	find VARCHAR(255),
	is_regex BOOLEAN NOT NULL DEFAULT(FALSE),
	in_title BOOLEAN NOT NULL DEFAULT(TRUE),
	in_content BOOLEAN NOT NULL DEFAULT(FALSE),
	includes BOOLEAN NOT NULL DEFAULT(FALSE),
	UNIQUE(slug),
	FOREIGN KEY(account_id) REFERENCES account(id) ON DELETE CASCADE
	FOREIGN KEY(subscription_id) REFERENCES subscription(id) ON DELETE CASCADE
);

-- TODO: apply filters
